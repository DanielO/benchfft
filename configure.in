dnl Process this file with autoconf to produce a configure script.
AC_INIT(libbench/bench.h)
AC_PREREQ(2.50)
AC_CANONICAL_SYSTEM
AM_INIT_AUTOMAKE(benchfft, 3.0-alpha0)
AM_CONFIG_HEADER(config.h)

dnl configure options
AC_ARG_ENABLE(debug, [  --enable-debug          compile benchfft with extra runtime checks for debugging], ok=$enableval, ok=no)
if test "$ok" = "yes"; then
	AC_DEFINE(BENCHFFT_DEBUG,1,[Define to enable extra benchfft debugging code.])
fi
AC_ARG_ENABLE(single, [  --enable-single         compile single-precision benchmark], ok=$enableval, ok=no)
if test "$ok" = "yes"; then
	AC_DEFINE(BENCHFFT_SINGLE,1,[Define to benchmark in single precision.])
fi
AM_CONDITIONAL(SINGLE, test "$ok" = "yes")
AM_CONDITIONAL(DOUBLE, test "$ok" = "no")

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CC_STDC
ACX_PROG_CC_EGCS
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET
AC_PROG_RANLIB
AC_PROG_AWK

dnl check for c++, but allow the check to fail
AC_CHECK_PROGS(CXX, $CCC c++ g++ gcc CC cxx cc++ cl, nosuchprogram)
if test "$CXX" = nosuchprogram; then
    CXX=""
else
    AC_PROG_CXX
fi

AC_CHECK_PROG(GZIP, gzip, gzip)
AC_CHECK_PROG(TAR, tar, tar)
AC_CHECK_PROG(MKDIR, mkdir, mkdir)
AC_CHECK_PROG(TR, tr, tr)
AC_CHECK_PROG(CP, cp, cp)
AC_CHECK_PROG(PATCH, patch, patch)

# Until autoconf gets separate F90 support, we must require that *all*
# .f files be compiled F90 if we want anything to be compiled with F90.
AC_ARG_WITH(f90, [  --with-f90              use F90 compiler for Fortran],
	ok=$withval, ok=no)
if test "x$ok" = "xyes"; then
	AC_CHECK_PROGS(F90, f90 xlf90 pgf90 fort f95 xlf95 g95)
	test -n "$F90" && F77="$F90"
fi

AC_PROG_F77
if test -n "$F77"; then
	AC_F77_LIBRARY_LDFLAGS
	AC_F77_DUMMY_MAIN([], bench_f77_fails=yes)
	if test "x$bench_f77_fails" = xyes; then
		AC_MSG_WARN([Cannot figure out how to link C code with Fortran libraries.])
		F77=""  # disable F77 benchmarks
		F90=""  # F90 too, since they use the same compiler
	else
		AC_F77_WRAPPERS
	fi
fi

test "x$F90FLAGS" = x && F90FLAGS="$FFLAGS"
test "x$F90LIBS" = x && F90LIBS="$FLIBS"
AC_SUBST(F90FLAGS)
AC_SUBST(F90LIBS)

AM_CONDITIONAL(HAVE_CXX, test -n "$CXX")
AM_CONDITIONAL(HAVE_F77, test -n "$F77")
AM_CONDITIONAL(HAVE_F90, test -n "$F90")

dnl Checks for header files.
AC_HEADER_STDC
AC_CHECK_HEADERS(malloc.h sys/time.h unistd.h string.h)
AC_CHECK_HEADERS(alloca.h stddef.h libintl.h)

dnl Checks for typedefs, structures, and compiler characteristics.
AC_C_CONST
AC_C_INLINE
AC_TYPE_SIZE_T
AC_HEADER_TIME

dnl Checks for library functions.
AC_FUNC_ALLOCA
AC_FUNC_MALLOC
AC_FUNC_VPRINTF
AC_CHECK_LIB(m, sin)
AC_CHECK_FUNCS(BSDgettimeofday)
AC_CHECK_FUNCS(gettimeofday)
AC_CHECK_FUNCS(drand48)
AC_CHECK_FUNCS(hypot)
AC_CHECK_FUNCS(sqrt)
AC_CHECK_FUNCS(strtod)
AC_CHECK_FUNCS(memset)

dnl Check for installed libraries
dnl check for pthreads library (required by MKL below)
AC_CHECK_LIB(pthread, pthread_attr_init)

dnl Check for FFTW 2
AC_CHECK_LIB(fftw, fftw_create_plan_specific,
	[LFFTW="-lfftw"; have_fftw2=yes])
AC_CHECK_LIB(rfftw, rfftw_create_plan_specific,
	[LFFTW="-lrfftw $LFFTW"; have_rfftw2=yes],[],$LFFTW)
AC_CHECK_HEADERS(fftw.h)
AC_CHECK_HEADERS(rfftw.h)
AC_SUBST(LFFTW)
AM_CONDITIONAL(HAVE_FFTW2, test -n "$have_fftw2" -a -n "$have_rfftw2")
AC_CHECK_LIB(sfftw, fftw_create_plan_specific,
	[LSFFTW="-lsfftw"; have_sfftw2=yes])
AC_CHECK_LIB(srfftw, rfftw_create_plan_specific,
	[LSFFTW="-lsrfftw $LSFFTW"; have_srfftw2=yes],[],$LSFFTW)
AC_CHECK_HEADERS(sfftw.h)
AC_CHECK_HEADERS(srfftw.h)
AC_SUBST(LSFFTW)
AM_CONDITIONAL(HAVE_SFFTW2, test -n "$have_sfftw2" -a -n "$have_srfftw2")

dnl Check for ESSL libraries
AC_CHECK_LIB(essl, dcft)

dnl Check for DEC Alpha DXML library
AC_CHECK_LIB(dxml, zfft_,
	[LIBS="-ldxml $LIBS"; have_dxml=yes])
AM_CONDITIONAL(HAVE_DXML, test -n "$have_dxml")
AC_CHECK_HEADERS(dxmldef.h)

dnl Check for Sun Performance library:
AC_CHECK_LIB(fsu, __f90_stop)
SAVE_LIBS=$LIBS
AC_CHECK_LIB(sunperf, cfftf,
	[LIBS="-lsunperf $LIBS";  have_sunperf=yes])
AM_CONDITIONAL(HAVE_SUNPERF, test -n "$have_sunperf")
AC_CHECK_HEADERS(sunperf.h)
AC_CHECK_FUNCS(sunperf_version_)
LIBS=$SAVE_LIBS  # sunperf's symbols may interfere with fftpack.

dnl Check for SGIMATH library:
AC_CHECK_LIB(complib.sgimath, zfft1d,
	[LIBS="-lcomplib.sgimath $LIBS"; have_sgimath=yes])
AM_CONDITIONAL(HAVE_SGIMATH, test -n "$have_sgimath")
AC_CHECK_HEADERS(fft.h)

dnl Check for Apple's vDSP/vecLib library:
xsave_CPPFLAGS="$CPPFLAGS"
CPPFLAGS="-I/System/Library/Frameworks/vecLib.framework/Headers"
test -z "$VECLIB" && VECLIB=/System/Library/Frameworks/vecLib.framework/vecLib
AC_CHECK_HEADER(vDSP.h,
	[AC_CHECK_LIB(m, fft_zop, [have_vdsp=yes],
		[CPPFLAGS="$xsave_CPPFLAGS"], $VECLIB)],
	[CPPFLAGS="$xsave_CPPFLAGS"])
AC_SUBST(VECLIB)
AM_CONDITIONAL(HAVE_VDSP, test -n "$have_vdsp")
if test -n "$have_vdsp"; then
	xsave_LIBS="$LIBS"
	LIBS="$LIBS $VECLIB"
	AC_CHECK_FUNCS(vec_malloc, vec_free)
	LIBS="$xsave_LIBS"
fi

dnl Check for Intel's MKL library:
AC_CHECK_LIB(mkl32_def, zfft1d_, [have_mkl32_def=yes])
AM_CONDITIONAL(HAVE_MKL32_DEF, test -n "$have_mkl32_def")
AC_CHECK_LIB(mkl32_p3, zfft1d_, [have_mkl32_p3=yes])
AM_CONDITIONAL(HAVE_MKL32_P3, test -n "$have_mkl32_p3")
AC_CHECK_LIB(mkl32_p4, zfft1d_, [have_mkl32_p4=yes])
AM_CONDITIONAL(HAVE_MKL32_P4, test -n "$have_mkl32_p4")
AC_CHECK_LIB(mkl64_itp, zfft1d_, [have_mkl64_itp=yes])
AM_CONDITIONAL(HAVE_MKL64_ITP, test -n "$have_mkl64_itp")
AC_CHECK_HEADERS(mkl_fft.h)
AC_CHECK_HEADERS(mkl_fftc_ln.h)

dnl Check for the GNU Scientific Library
AC_CHECK_LIB(gslcblas, cblas_dsdot) dnl why on the hell does it use cblas?
AC_CHECK_LIB(gsl, gsl_fft_complex_forward, [have_gsl=yes])
AC_CHECK_HEADERS([gsl/gsl_fft.h gsl/gsl_fft_complex.h gsl/gsl_fft_real.h])
AC_CHECK_HEADERS([gsl/gsl_fft_halfcomplex.h gsl/gsl_version.h])
AM_CONDITIONAL(HAVE_GSL, test -n "$have_gsl")

dnl Check for SCSL library (SGI/Cray Scientific Library):
AC_CHECK_LIB(scs, zzfft)

dnl Check for Cray SCILIB library:
AC_CHECK_LIB(sci, CCFFT)

dnl Check for IMSL library:
AC_CHECK_LIB(imsl, imsl_fftf)

dnl Check for NAG library:
AC_CHECK_LIB(nag, c06fcf)

AC_MSG_CHECKING([for isnan])
AC_TRY_LINK([#include <math.h>
], if (!isnan(3.14159)) isnan(2.7183);, ok=yes, ok=no)
if test "$ok" = "yes"; then
	AC_DEFINE(HAVE_ISNAN,1,[Define if the isnan() function/macro is available.])
fi
AC_MSG_RESULT(${ok})


dnl check for optimization options
dnl This macro sets ANSI mode for certain compilers, and must
dnl thus come before the subsequenct checks
ACX_PROG_CC_MAXOPT(benchfft)

dnl override CFLAGS selection when debugging
if test "${enable_debug}" = "yes"; then
	CFLAGS="-g"
fi

AC_DEFINE_UNQUOTED(BENCH_CC, "$CC $CFLAGS", [C compiler name and flags])
if test -n "$CXX"; then
	AC_DEFINE_UNQUOTED(BENCH_CXX, "$CXX $CXXFLAGS",
		[C++ compiler name and flags])
fi
if test -n "$F77"; then
	AC_DEFINE_UNQUOTED(BENCH_F77, "$F77 $FFLAGS",
		[Fortran 77 compiler name and flags])
fi
if test -n "$F90"; then
	AC_DEFINE_UNQUOTED(BENCH_F90, "$F90 $F90FLAGS",
		[Fortran 90 compiler name and flags])
fi

dnl TODO
ACX_GCC_ALIGNS_STACK()

AC_OUTPUT([
Makefile
libbench/Makefile
benchees/Makefile
scripts/Makefile

benchees/cwplib/Makefile
benchees/dfftpack/Makefile
benchees/djbfft-0.76/Makefile
benchees/dsp/Makefile
benchees/dxml/Makefile
benchees/fftpack/Makefile
benchees/fftw2/Makefile
benchees/fxt/Makefile
benchees/gpfa/Makefile
benchees/green-ffts-2.0/Makefile
benchees/gsl/Makefile
benchees/harm/Makefile
benchees/intel-mkl/Makefile
benchees/krukar/Makefile
benchees/mixfft/Makefile
benchees/mpfun77/Makefile
benchees/mpfun90/Makefile
benchees/ooura/Makefile
benchees/sgimath/Makefile
benchees/singleton/Makefile
benchees/sunperf/Makefile
benchees/temperton/Makefile
benchees/vdsp/Makefile

])
